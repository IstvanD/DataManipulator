/**
 * Copyright (c) 2000-2010 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.tool.datamanipulator.model;

import com.liferay.portal.kernel.annotation.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

/**
 * The base model interface for the DataManipulator service. Represents a row in the &quot;DM_DataManipulator&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.tool.datamanipulator.model.impl.DataManipulatorModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.tool.datamanipulator.model.impl.DataManipulatorImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this interface directly. All methods that expect a data manipulator model instance should use the {@link DataManipulator} interface instead.
 * </p>
 *
 * @author Tibor KovĂˇcs
 * @see DataManipulator
 * @see com.liferay.tool.datamanipulator.model.impl.DataManipulatorImpl
 * @see com.liferay.tool.datamanipulator.model.impl.DataManipulatorModelImpl
 * @generated
 */
public interface DataManipulatorModel extends BaseModel<DataManipulator> {
	/**
	 * Gets the primary key of this data manipulator.
	 *
	 * @return the primary key of this data manipulator
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this data manipulator
	 *
	 * @param pk the primary key of this data manipulator
	 */
	public void setPrimaryKey(long pk);

	/**
	 * Gets the id of this data manipulator.
	 *
	 * @return the id of this data manipulator
	 */
	public long getId();

	/**
	 * Sets the id of this data manipulator.
	 *
	 * @param id the id of this data manipulator
	 */
	public void setId(long id);

	/**
	 * Gets the group id of this data manipulator.
	 *
	 * @return the group id of this data manipulator
	 */
	public long getGroupId();

	/**
	 * Sets the group id of this data manipulator.
	 *
	 * @param groupId the group id of this data manipulator
	 */
	public void setGroupId(long groupId);

	/**
	 * Gets the class name of this data manipulator.
	 *
	 * @return the class name of this data manipulator
	 */
	@AutoEscape
	public String getClassName();

	/**
	 * Sets the class name of this data manipulator.
	 *
	 * @param className the class name of this data manipulator
	 */
	public void setClassName(String className);

	/**
	 * Gets the class p k of this data manipulator.
	 *
	 * @return the class p k of this data manipulator
	 */
	public long getClassPK();

	/**
	 * Sets the class p k of this data manipulator.
	 *
	 * @param classPK the class p k of this data manipulator
	 */
	public void setClassPK(long classPK);

	public boolean isNew();

	public void setNew(boolean n);

	public boolean isCachedModel();

	public void setCachedModel(boolean cachedModel);

	public boolean isEscapedModel();

	public void setEscapedModel(boolean escapedModel);

	public Serializable getPrimaryKeyObj();

	public ExpandoBridge getExpandoBridge();

	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public Object clone();

	public int compareTo(DataManipulator dataManipulator);

	public int hashCode();

	public DataManipulator toEscapedModel();

	public String toString();

	public String toXmlString();
}